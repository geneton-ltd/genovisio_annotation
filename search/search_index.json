{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"annotation/","title":"Documentation for <code>Annotation</code>","text":"<p>handler: python options: show_root_heading: false show_source: true</p>"},{"location":"annotation/#src.annotation.Annotation.cnv","title":"<code>cnv: CNVRegionAnnotation</code>  <code>instance-attribute</code>","text":"<p>See <code>CNVRegionAnnotation</code></p>"},{"location":"annotation/#src.annotation.Annotation.count_gene_types","title":"<code>count_gene_types()</code>","text":"<p>Count the number of genes of each type in GenesDB</p> <p>Returns:</p> Type Description <code>GenesDBGeneTypesCounter</code> <p>A dictionary with the count of each gene type.</p>"},{"location":"annotation/#src.annotation.Annotation.count_regulatory_types","title":"<code>count_regulatory_types()</code>","text":"<p>Count the number of regulatory element types in the database</p> <p>Returns:</p> Type Description <code>RegulatoryTypesCounter</code> <p>A dictionary with the count of each regulatory type.</p> Notes <pre><code>The regulatory database entries are looped over and their \"type\" element is checked for presence in any of existing regulatory types.\nUnknown regulatory types are counted as 'other'. To get a count of all regulatory types, sum the values.\n</code></pre>"},{"location":"annotation/#src.annotation.Annotation.get_annotated_genes","title":"<code>get_annotated_genes()</code>","text":"<p>Get list of names for genes that are morbid or associated with a disease</p> <p>Returns:</p> Type Description <code>AnnotatedGenesList</code> <p>Dictionary with two lists of gene names: 'morbid_genes' and 'associated_with_disease' and two list s of URLs: 'morbid_genes_url' and 'associated_with_disease_url'.</p>"},{"location":"annotation/#src.annotation.Annotation.get_benign_cnvs_gs_outer","title":"<code>get_benign_cnvs_gs_outer(frequency_threshold)</code>","text":"<p>Get Benign CNV GS outer entries with no defined frequency or higher than the threshold</p> <p>Parameters:</p> Name Type Description Default <code>frequency_threshold</code> <code>float</code> <p>Minimum frequency for a benign CNV GS outer entry to be considered</p> required <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>List of benign CNV GS outer entries</p> See Also <p>core.MIN_FREQUENCY_BENIGN     Minimum frequency for a benign CNV GS outer entry to be considered</p>"},{"location":"annotation/#src.annotation.Annotation.get_common_variability_regions","title":"<code>get_common_variability_regions()</code>","text":"<p>Get GnomAD regions that intersect with the CNV and are in the specified populations</p> <p>Returns:</p> Type Description <code>list[CommonVariabilityRegion]</code> <p>List of common variability regions that intersect with the CNV</p> See Also <p>core.POPULATION_FOR_COMMON_VARIABILITY     List of populations for common variability core.COMMON_VARIABILITY_FREQUENCY_THRESHOLD     Minimum frequency for a common variability region to be considered</p>"},{"location":"annotation/#src.annotation.Annotation.get_gene_by_name","title":"<code>get_gene_by_name(gene_name)</code>","text":"<p>Get 'Genes' entry with gene_name</p>"},{"location":"annotation/#src.annotation.Annotation.get_gene_transcript_regions","title":"<code>get_gene_transcript_regions(gene_name)</code>","text":"<p>Get transcript regions for a gene</p> <p>Parameters:</p> Name Type Description Default <code>gene_name</code> <code>str</code> <p>Name of the gene</p> required <p>Returns:</p> Type Description <code>list[TranscriptRegion]</code> <p>List of transcript regions for the gene</p>"},{"location":"annotation/#src.annotation.Annotation.get_genes","title":"<code>get_genes(gene_type=None, overlap=enums.Overlap.ANY)</code>","text":"<p>Get 'Genes' entries whose gene_type is 'gene_type' and overlaps the CNV region in that manner</p>"},{"location":"annotation/#src.annotation.Annotation.get_haploinsufficient_gene_names","title":"<code>get_haploinsufficient_gene_names(overlap_type, valid_scores)</code>","text":"<p>Get names of genes with sufficient Haploinsufficiency Score</p>"},{"location":"annotation/#src.annotation.Annotation.get_haploinsufficient_genes","title":"<code>get_haploinsufficient_genes(overlap_type, valid_scores)</code>","text":"<p>Get all HiGene entries with sufficient Haploinsufficiency Score</p> <p>Parameters:</p> Name Type Description Default <code>overlap_type</code> <code>Overlap</code> <p>Type of overlap to consider.</p> required <code>valid_scores</code> <code>list[int]</code> <p>List of valid scores to consider. Entry scores are coerced to integers.</p> required <p>Returns:</p> Type Description <code>list[HiGeneEntry]</code> <p>List of HiGene entries with sufficient Haploinsufficiency Score</p>"},{"location":"annotation/#src.annotation.Annotation.get_haploinsufficient_regions","title":"<code>get_haploinsufficient_regions(overlap_type, valid_scores)</code>","text":"<p>Get all HiRegion entries with sufficient Haploinsufficiency Score</p> <p>Parameters:</p> Name Type Description Default <code>overlap_type</code> <code>Overlap</code> <p>Type of overlap to consider.</p> required <code>valid_scores</code> <code>list[int]</code> <p>List of valid scores to consider. Entry scores are coerced to integers.</p> required <p>Returns:</p> Type Description <code>list[HiRegionEntry]</code> <p>List of HiRegion entries with sufficient Haploinsufficiency Score</p>"},{"location":"annotation/#src.annotation.Annotation.get_hi_or_ts_genes_url","title":"<code>get_hi_or_ts_genes_url(hi_or_genes_list)</code>","text":"<p>Get URLs for genes that are in list of Haploinsufficient or Triplosensitive genes</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of gene URLs for genes with sufficient Haploinsufficiency or Triplosensitivity Score</p>"},{"location":"annotation/#src.annotation.Annotation.get_high_risk_loss_genes","title":"<code>get_high_risk_loss_genes()</code>","text":"<p>Get genes with high risk loss predictors</p> <p>Raises:</p> Type Description <code>HighRiskForDuplicationError</code> <p>If the CNV region is a duplication, not a loss</p> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>List of genes with high risk loss predictors</p> See Also <p>core.HIGH_RISK_PREDICTORS     List of high risk predictors core.HIGH_RISK_PREDICTORS_COUNT_THRESHOLD     Minimum number of high risk predictors for a gene to be considered high risk</p>"},{"location":"annotation/#src.annotation.Annotation.get_triplosensitivity_gene_names","title":"<code>get_triplosensitivity_gene_names(overlap_type, valid_scores)</code>","text":"<p>Get names of genes with sufficient Triplosensitivity Score</p>"},{"location":"annotation/#src.annotation.Annotation.get_triplosensitivity_genes","title":"<code>get_triplosensitivity_genes(overlap_type, valid_scores)</code>","text":"<p>Get all HiGene entries with sufficient Triplosensitivity Score</p> <p>Parameters:</p> Name Type Description Default <code>overlap_type</code> <code>Overlap</code> <p>Type of overlap to consider.</p> required <code>valid_scores</code> <code>list[int]</code> <p>List of valid scores to consider. Entry scores are coerced to integers.</p> required <p>Returns:</p> Type Description <code>list[HiGeneEntry]</code> <p>List of HiGene entries with sufficient Triplosensitivity Score</p>"},{"location":"annotation/#src.annotation.Annotation.get_triplosensitivity_regions","title":"<code>get_triplosensitivity_regions(overlap_type, valid_scores)</code>","text":"<p>Get all HiRegion entries with sufficient Triplosensitivity Score</p> <p>Parameters:</p> Name Type Description Default <code>overlap_type</code> <code>Overlap</code> <p>Type of overlap to consider.</p> required <code>valid_scores</code> <code>list[int]</code> <p>List of valid scores to consider. Entry scores are coerced to integers.</p> required <p>Returns:</p> Type Description <code>list[HiRegionEntry]</code> <p>List of HiRegion entries with sufficient Triplosensitivity Score</p>"},{"location":"annotation/#src.annotation.Annotation.load_from_json","title":"<code>load_from_json(json_file)</code>  <code>classmethod</code>","text":"<p>Load annotation from a JSON file</p> <p>Parameters:</p> Name Type Description Default <code>json_file</code> <code>str</code> <p>Path to the JSON file. Can be gzipped.</p> required <p>Returns:</p> Type Description <code>Annotation</code> <p>Annotation object loaded from the JSON file.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the file does not exist.</p>"},{"location":"cnv_region_annot/","title":"Documentation for <code>CNVRegionAnnotation</code>","text":"<p>handler: python options: show_root_heading: false show_source: true</p>"},{"location":"cnv_region_annot/#src.annotation.CNVRegionAnnotation.chr","title":"<code>chr: str</code>  <code>instance-attribute</code>","text":"<p>Chromosome of the CNV region in the format like <code>chr1</code></p>"},{"location":"cnv_region_annot/#src.annotation.CNVRegionAnnotation.cnv_type","title":"<code>cnv_type: enums.CNVType</code>  <code>instance-attribute</code>","text":"<p>Type of the CNV region</p>"},{"location":"cnv_region_annot/#src.annotation.CNVRegionAnnotation.cytogenetic_position","title":"<code>cytogenetic_position: str</code>  <code>instance-attribute</code>","text":"<p>Cytogenetic position of the CNV region, e.g.: <code>q15.1</code></p>"},{"location":"cnv_region_annot/#src.annotation.CNVRegionAnnotation.end","title":"<code>end: int</code>  <code>instance-attribute</code>","text":"<p>End position of the CNV region</p>"},{"location":"cnv_region_annot/#src.annotation.CNVRegionAnnotation.genomic_coord","title":"<code>genomic_coord: str</code>  <code>property</code>","text":"<p>Genomic coordinates in the format <code>chr:start-end</code></p>"},{"location":"cnv_region_annot/#src.annotation.CNVRegionAnnotation.is_duplication","title":"<code>is_duplication: bool</code>  <code>property</code>","text":"<p>Check if the CNV region is a duplication</p>"},{"location":"cnv_region_annot/#src.annotation.CNVRegionAnnotation.length","title":"<code>length: int</code>  <code>instance-attribute</code>","text":"<p>Length of the CNV region</p>"},{"location":"cnv_region_annot/#src.annotation.CNVRegionAnnotation.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":"<p>Name of the CNV region given as <code>{chr}_{start}_{end}_{cnv_type}</code></p>"},{"location":"cnv_region_annot/#src.annotation.CNVRegionAnnotation.start","title":"<code>start: int</code>  <code>instance-attribute</code>","text":"<p>Start position of the CNV region</p>"},{"location":"cnv_region_annot/#src.annotation.CNVRegionAnnotation.get_overlap_with_region","title":"<code>get_overlap_with_region(target_start, target_end)</code>","text":"<p>Get the number of overlapping bases with another interval.</p>"},{"location":"cnv_region_annot/#src.annotation.CNVRegionAnnotation.has_end_in_region","title":"<code>has_end_in_region(target_start, target_end)</code>","text":"<p>Check if the CNV region has its end in the target region</p>"},{"location":"cnv_region_annot/#src.annotation.CNVRegionAnnotation.has_start_in_region","title":"<code>has_start_in_region(target_start, target_end)</code>","text":"<p>Check if the CNV region has its start in the target region</p>"},{"location":"cnv_region_annot/#src.annotation.CNVRegionAnnotation.is_overlapping","title":"<code>is_overlapping(target_start, target_end, overlap)</code>","text":"<p>Check if the CNV region overlaps with another region in the specified manner</p>"},{"location":"cnv_region_annot/#src.annotation.CNVRegionAnnotation.is_position_inside","title":"<code>is_position_inside(position)</code>","text":"<p>Check if the position is inside the CNV region</p>"},{"location":"cnv_region_annot/#src.annotation.CNVRegionAnnotation.matches_cnv_type_or_both","title":"<code>matches_cnv_type_or_both(benign_cnv_type)</code>","text":"<p>Check whether benign_cnv matches the CNV type or is a combination of both</p> <p>Parameters:</p> Name Type Description Default <code>benign_cnv_type</code> <code>str</code> <p>Type of CNV as given by entry in benign CNV DB</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if benign_cnv_type matches the CNV type or is a combination of both, False otherwise</p>"},{"location":"enums/","title":"Documentation for <code>enums</code>","text":"<p>handler: python options: show_root_heading: false show_source: true</p>"},{"location":"enums/#src.enums.CNVType","title":"<code>CNVType</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Types of CNV regions.</p>"},{"location":"enums/#src.enums.CNVType.GAIN","title":"<code>GAIN = 'gain'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Represent a duplication of a region</p>"},{"location":"enums/#src.enums.CNVType.LOSS","title":"<code>LOSS = 'loss'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Represent a deletion of a region</p>"},{"location":"enums/#src.enums.GenesDBGeneType","title":"<code>GenesDBGeneType</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Types of genes as stored in the GenesDB database.</p>"},{"location":"enums/#src.enums.Overlap","title":"<code>Overlap</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Possible types of overlap between two regions.</p>"},{"location":"enums/#src.enums.Overlap.ANY","title":"<code>ANY = enum.auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>any overlap between regions</p>"},{"location":"enums/#src.enums.Overlap.CONTAINED_INSIDE","title":"<code>CONTAINED_INSIDE = enum.auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>the second region is inside the entire first region</p>"},{"location":"enums/#src.enums.Overlap.END_ONLY","title":"<code>END_ONLY = enum.auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>the second region overlap only the end of the second region (and not start)</p>"},{"location":"enums/#src.enums.Overlap.SPAN_ENTIRE","title":"<code>SPAN_ENTIRE = enum.auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>the second region overlaps the entire first region</p>"},{"location":"enums/#src.enums.Overlap.START_ONLY","title":"<code>START_ONLY = enum.auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>the second region overlap only the start of the second region (and not end)</p>"},{"location":"enums/#src.enums.Overlap.START_OR_END","title":"<code>START_OR_END = enum.auto()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>the second region overlap either only the end or the start of the second region</p>"},{"location":"enums/#src.enums.RegulatoryType","title":"<code>RegulatoryType</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Types of regulatory elements as stored in the database.</p>"},{"location":"outputs/","title":"Documentation for <code>output_schemas</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Representation of a transcript region</p> <p>handler: python options: show_root_heading: false show_source: true</p>"},{"location":"outputs/#src.annotation.TranscriptRegion.cds_overlaps","title":"<code>cds_overlaps: list[int]</code>  <code>instance-attribute</code>","text":"<p>List of lengths of CDS overlaps, in the number of bases</p>"},{"location":"outputs/#src.annotation.TranscriptRegion.five_prime_utr_overlaps","title":"<code>five_prime_utr_overlaps: list[int]</code>  <code>instance-attribute</code>","text":"<p>List of lengths of prime 5' UTR overlaps, in the number of bases</p>"},{"location":"outputs/#src.annotation.TranscriptRegion.flag_contained","title":"<code>flag_contained: bool</code>  <code>instance-attribute</code>","text":"<p>Flag indicating if the transcript is completely contained inside the CNV region</p>"},{"location":"outputs/#src.annotation.TranscriptRegion.flag_five_inside","title":"<code>flag_five_inside: bool</code>  <code>instance-attribute</code>","text":"<p>Flag indicating if the transcript start is inside the CNV region. Properly handling +/- strands</p>"},{"location":"outputs/#src.annotation.TranscriptRegion.flag_three_inside","title":"<code>flag_three_inside: bool</code>  <code>instance-attribute</code>","text":"<p>Flag indicating if the transcript end is inside the CNV region. Properly handling +/- strands</p>"},{"location":"outputs/#src.annotation.TranscriptRegion.identifier","title":"<code>identifier: str</code>  <code>instance-attribute</code>","text":"<p>Identifier of the transcript</p>"},{"location":"outputs/#src.annotation.TranscriptRegion.length","title":"<code>length: int</code>  <code>instance-attribute</code>","text":"<p>Length of the transcript</p>"},{"location":"outputs/#src.annotation.TranscriptRegion.three_prime_utr_overlaps","title":"<code>three_prime_utr_overlaps: list[int]</code>  <code>instance-attribute</code>","text":"<p>List of lengths of prime 3' UTR overlaps, in the number of bases</p>"}]}